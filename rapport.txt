Logique : traitement limite big data
optimiser au maximum les calculs :
	addition plutôt que division
	tout en un tableau à une dimension = matrice
	php plutôt que js car serveur exécute et pas navigateur

mt_rand : Par défaut, PHP utilise le générateur de nombres aléatoires de libc avec la fonction rand(). mt_rand() est une fonction de remplacement, pour cette dernière. Elle utilise un générateur de nombres aléatoire de caractéristique connue, le " » Mersenne Twister " qui est 4 fois plus rapide que la fonction standard libc. 
<!> ne pas utiliser si tâche est liée à la sécurité mais pas notre cas…
-> random plus rapide

Stocker l’image uploadée dans dossier tempo avec toujours le même nom


php_ini : 128 MB max memory_limit

26/05/2015 : a pensé à l'algo k-means pour trouver les couleurs princpales mais on n'explorerait pas toutes les routes...


max_execution_time = 120 -> 0 // passe par ini_set


Pistes suivies pour alog
1. tout au hasard
2. 1 hasard et 2 avec les 2 meilleurs : mauvais, n'obtiendra jamais le bon résultat
3. 1 hasard, et 2 avec 1 meilleur et 1 hasard : 
	meilleur pour orienter et le hasard pour nuancer
	version stable mais manque de performance vers la fin.
	on se rapproche vite mais on stagne à la fin
4. 1 le meilleur, et 2 avec 1 meilleur et 1 hasard : 
	meilleur pour orienter et le hasard pour nuancer


Pour gagner du temps dans l'exécution de l'algo on stocke dans des tableaux les valeurs des pixels uniques et tous les pixels.
Les fichiers contenant les tableaux ont trois tableaux contenant diverses informations : 

$image_infos : contient les infos comme la hauteur et largeur de l'image
$image_unique : contient les pixels qui sont uniques un à un 
$image_individuals : contient tous les pixels de l'image dans l'ordre



------ JOCONDE 35x35
uploaded/joconde_little.png -> _results/joconde_little_pixels_1433188693.6549.png :
MIN_FITTING_POURCENTAGE :100
CROSSOVER_ACTIVATE_THRESHOLD :5
MUTATION_ACTIVATE_THRESHOLD :20
MAX_ITERATIONS :10
STATS :array ( 'nb_generations' => 10, 'min_fitting' => 0, 'fitting_total' => 1431, 'microtime_start' => 1433188651.1945901, 'nb_error' => 328, 'percentage_error' => 0.17681940700808627, 'microtime_end' => 1433188693.6490459, )